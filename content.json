{"pages":[{"title":"about","text":"Github 안녕하세요 현재 컴퓨터학부 4학년에 재학 중인 주지호 입니다.또한, Data 분야에 관심이 가서 통계학을 부전공으로 공부하고 있습니다. 현재 관심있는 분야는 Cloud Computing, Devops, Data 입니다. “하루는 성실하게. 인생 전체는 되는대로” - 이동진(‘밤은 책이다’ 중에서) 라는 말씀을 제 인생의 방향으로 섬기며 살고 있습니다. 아직은 어떤 분야에 기여를 할 지 모르지만 미래에 사람들에게 들려줄 이야기가 많은 개발자가 되도록 오늘도 성실하게 달립니다!!!! Skills Python, C++ FastAPI, Django, Flask OpenStack, Docker Projects Contributon OpenStack OpenSource Project - 2021.08 ~ 2021.11 Log Object Parsing Project - 2022.01 ~ ing Commit Message Corrector - 2022.05 ~ 2022.06","link":"/about/index.html"}],"posts":[{"title":"Master Challenge - CLI와 친해지기","text":"들어가며저번 주엔 devstack 을 구축했다면 devstack 안에서 오픈스택 CLI 를 다뤄보는 것이 이번 주 미션이었다. 사실 아직 openstack에 대해 제대로 이해도 못해서 과제를 과연 잘 끝낼 수 있을까? 두려움이 앞섰지만 막상 시작해보니 아주 잘 끝냈다ㅎㅎ 역시 “시작이 반이다” 라는 말이 괜히 있는게 아닌 거 같다. 이제 어떻게 이 미션을 클리어 했는지 정리해보겠습니다. 아 그리고 먼저 팀 블로그에 더 상세히 정리한 내용이 있으니 오픈스택 팀 블로그에 올려둔 상세 정리본 부족한 내용은 여기서 보충해주시면 좋을 거 같습니다^^ OpenStack 팀 블로그: https://openstack-kr-contribution-academy-2021.readthedocs.io/ko/latest/ 환경변수 설정먼저 오픈스택 command를 사용하기 위해 환경변수를 설정해주자. 만약 환경변수 설정을 안하고 openstack command 를 사용하게 되면 다음과 같은 ERROR를 보실 수 있을 것이다. 그렇기에 꼭 환경변수 설정부터!! Missing value auth-url required for auth plugin password devstack은 환경변수를 사용자 계정에 맞게 설정해주는 스크립트를 제공해준다. 1source openrc admin(사용자) admin(프로젝트이름) 해당 command는 환경변수에 필요한 내용을 admin 사용자의 권한으로 읽어오고 admin 프로젝트를 default 로 바라보게 해준다. 해당 command를 수행하면 다음과 같은 에러가 발생할 수 있다. CryptographyDeprecationWarning: int_from_bytes is deprecated, use int.from_bytes instead 원인 an upstream bug with twisted’s dependency 해결방안 crytography &lt; 3.4 와 같은 옛날 버전의 crytography 를 설치해야 한다. 이 버전은 twisted’s dependency를 만족하고 deprecation warings 를 throw 하지 않는다. cd /opt/stack/devstack 에서 pip install cryptography==3.3 명령어를 수행하니 더이상 에러가 발생하지 않는다. version 3.3 을 선택한 이유는 3.4 이하 버전에서 가장 최신 버전이라 선택했다. 그럼 이렇게 devstack 환경변수 설정을 끝냈으면 과제를 수행해보자! cirros image 로 인스턴스 생성을 cli로 해보기과제를 끝마치고 이 글을 정리하면서 드는 생각은 이 문제는 쉬웠다고 생각한다. 하지만 시작할 땐 cirros image?가 대체 뭐지,,,인스턴스 생성?? 일단 구글링을 해서 어느 분이 정리해준 블로그를 보며 답에 대한 실마리를 찾았다. 그리고 공식문서[https://docs.openstack.org/python-openstackclient/pike/cli/command-list.html]를 뒤져보며 정답을 찾았다. 역시 공식문서에 openstack command List 가 아주 상세히 정리되어있다. 12openstack server create --image=[가지고 있는 이미지] --flavor=[사양] --network=[public/private/shared] instance_nameopenstack [server, flavor, network] list # (server, flavor, image 등) list 출력 ubuntu 이미지를 받고, root password를 설정한 다음 cli로 이미지 등록한 후 인스턴스 생성하고 접속까지 하기Ubuntu Image 다운로드 받기OpenStack 용 우분투 이미지는 일반 OS 이미지를 사용하는 것이 아니라 클라우드용으로 생성해 놓은 이미지를 생성해놔야 한다. 원하는 이미지로 인스턴스를 생성하기 위해서는 이미지 파일을 받아서 오픈스택 대쉬보드에 업로드를 해야한다. 이미지 공금원 사이트 : Ubuntu Cloud Images[https://cloud-images.ubuntu.com/bionic/current/] (해당 링크는 OpenStack 공식문서 Ubuntu 18.04 LTS (Bionic Beaver) Daily Build 로 다운 링크가 걸려있다.) OpenStack 공식문서를 보게되면 다음과 같은 내용이 있다. 1If your deployment uses QEMU or KVM, we recommend using the images in qcow2 format, with name ending in .img. The most recent version of the 64-bit amd64-arch QCOW2 image for Ubuntu 18.04 is bionic-server-cloudimg-amd64-disk.img Ubuntu 18.04 is bionic-server-cloudimg-amd64-disk.img 를 다운 받을 것을 권장한다. 해당 image를 리눅스 명령어 wget 를 사용해 devstack 내부에서 다운받자. 1wget &lt;다운로드 URL&gt; root password 설정Ubuntu Cloud Image는 default username/password 가 없어 해당 image 로 instance 를 생성하기 전에 root password 설정이 필요하다. virt-customize 라는 툴을 이용하여 image root password 를 설정해주자. 그 전에 해당 cmd 를 사용하기 위해선 libguestfs-tools pkg 를 다운 받아야 한다. 1sudo apt install libguestfs-tools 위와 같이 pkg 를 설치했다면 다음과 같은 명령어로 root password 를 변경해보자 1sudo virt-customize -a bionic-server-cloudimg-amd64.img --root-password password:&lt;비밀번호&gt; 참고 https://docs.openstack.org/image-guide/obtain-images.html http://charmingwebdesign.com/how-to-set-a-root-password-for-your-openstack-images-2/ https://askubuntu.com/questions/451673/default-username-password-for-ubuntu-cloud-image cli로 image 등록하기1번 문제와 비슷하다. 해당 command로 image를 등록해주면된다!!! 12# 여기선 network 를 public 으로 지정했다.openstack image create &quot;Ubuntu-18.04 LTS&quot; --file bionic-server-cloudimg-amd64.img --disk-format qcow2 --container-format=bare --public 참고 https://docs.openstack.org/glance/pike/admin/manage-images.html https://docs.openstack.org/python-openstackclient/pike/cli/command-list.html 인스턴스 생성하기1번 문제와 같이 해당 command를 수행하게되면 openstack instance 가 생성된다. 12openstack server create --image=&lt;image_name&gt; --flavor=&lt;flavor_name&gt; --network=&lt;network_name&gt; &lt;instance_name&gt;# 예) openstack server create --image=Ubuntu-18.04 LTS --flavor=m1.tiny --network=public task2_instance cli로 floating ip 생성 후 인스턴스에 할당 / 해제 해보기Floating IP 는 Fixed IP 처럼 자동으로 인스턴스에 default 로 할당되어 있지 않기 때문에 직접 인스턴스에 attach 해줘야 한다. 사용자들은 external network 로부터 인스턴스에 대한 연결성을 보장해주기 위해 cloud administrator 에 의해 정의된 다른 pool 부터 floating IP를 grab 해와야 한다.[https://www.mirantis.com/blog/configuring-floating-ip-addresses-networking-openstack-public-private-clouds/] Floating IP 생성 후 인스턴스에 할당Floating IP Address는 Default로 public pool 로 부터 할당된다. 12openstack floating ip create public # floating ip를 클라우드 서버 인스턴스에 할당openstack floating ip list # floating ip 들 확인 해당 명령어를 통해 floating ip 가 생성된 것을 확인할 수 있을 것이다. 이제 생성된 floating ip address를 instance와 연결시켜보자. 12openstack server add floating ip &lt;instance_name&gt; &lt;floating_ip_address&gt;# openstack server add floating ip test_instance 생성한 floating ip address 를 instance 에 associate 해주는 과정에서 발생했다. ResourceNotFound: 404: Client Error for url: http://211.37.148.128:9696/v2.0/floatingips/d47567b0-9a41-4aec-b733-d9b0d6a3cf26, External network fe2d465c-4669-45de-8860-fa6373ef9ca2 is not reachable from subnet bcec19b3-1711-4af9-80e2-b1b2fdd95457 . Therefore, cannot associate Port 7a8c850c-152b-434b-b900-2206375fc0a4 with a Floating IP. Error 발생 이유 public 네트워크로 인스턴스를 생성 시 생성된 인스턴스는 Clound VM 의 가상 네트워크를 사용하는 것이 아닌 실제로 존재하는 네트워크 주소를 가진 것이다. 현재 생성한 Floating IP 는 public pool 에서 가져온 것(실존 네트워크)이니 굳이 이 Floating IP 를 public 네트워크로 생성한 인스턴스에 할당해줄 필요가 없다. 서로 실존하는 네트워크가 겹쳐? 에러가 난 것이다. 해결 방안 public 이 아닌 private 네트워크로 생성한 인스턴스에 floating IP를 할당해주도록 하자!!!! 참조 https://www.mirantis.com/blog/configuring-floating-ip-addresses-networking-openstack-public-private-clouds/ https://docs.openstack.org/ocata/user-guide/cli-manage-ip-addresses.html https://help.dreamhost.com/hc/en-us/articles/215912768-Managing-floating-IP-addresses-using-the-OpenStack-CLI 10.8.0.0/24 네트워크를 만들고 public network와 연결하는 과정을 cli로 해보기이제 오픈스택 CLI에 감?을 잡아서 자신감이 생겼다ㅎㅎ 그래서 CLI로 하기전에 GUI 로 네트워크를 생성하고 public network 와 연결하는 과정을 진행해보며 CLI로 하는 과정에서 어떤 옵션을 줘야하는지 파악하기로 했다. GUI 과정은 이 글에선 생략하고 바로 CLI 과정을 정리해보겠습니다. 오픈스택 팀 블로그]에 먼저 GUI 과정과 CLI 과정을 상세히 정리해놨으니 보충이 필요하다면 참고하시면 되겠습니다!! CLI 과정CLI 를 통해 생성해야 되는 것 &amp; 각 옵션들 network ◦ 네트워크 이름 subnet ◦ 서브넷 이름 ◦ 네트워크 주소 range ◦ 서브넷을 서브넷팅 해줄 네트워크 이름(위에서 생성한 네트워크 이름) interface ◦ router에 연결할 서브넷 이름 네트워크 생성1openstack network create &lt;네트워크 이름&gt; 해당 명령어를 수행하면 네트워크가 생성된 것을 확인할 수 있을 것이다. 아직 subnet를 지정해주지 않아 subnets 옵션에 값이 없는 것을 볼 수 있다. 서브넷 생성1openstack subnet create --network=&lt;연결 네트워크 이름&gt; --subnet-range=&lt;네트워크 지정 범위&gt; &lt;서브넷 이름&gt; Public network에 연결하기라우터에 연결할 Subnet의 인터페이스를 생성해야하니 다음 명령어를 수행해주자. 1openstack router add subnet &lt;라우터 이름&gt; &lt;서브넷 이름&gt; 그 결과 router에 해당 subnet 인터페이스가 생성된 것을 볼 수 있다. 참조 https://docs.openstack.org/newton/ko_KR/install-guide-obs/launch-instance-networks-selfservice.html https://docs.openstack.org/liberty/ko_KR/install-guide-obs/launch-instance-networks-private.html","link":"/2021/08/20/openstack-1/"},{"title":"Master Challenge - openstack server list 명령어 동작 원리 파악하기","text":"들어가며“openstack server list” 명령어를 입력하면 코드상에서 어떻게 명령어의 인자 값을 구별하고 어떻게 처리를 하는지, 어떻게 예쁘게 테이블 형태로 출력하는지 동작하는지 정리해보겠다. 이 글에선 결론과 간략하게 도출과정을 소개하겠습니다. 상세한 도출 과정은 먼저 오픈스택 팀 블로그에 올려둔 상세 정리본에 작성했으니 참고하시면 되겠습니다. 또 미션 1, 2번의 경우 도출과정이 너무너무 길어 노션에 더욱 상세히 정리했으니 참고하시면 될 거 같습니다 :) OpenStack 팀 블로그: https://openstack-kr-contribution-academy-2021.readthedocs.io/ko/latest/ 인자로 입력받은 server list 를 어떻게 구별해내는가결론OpenStackShell object 는 주어진 인자(예: server list)를 처리하기 전에 각 API version 에 대한 혹은 cli, common, extension 등과 같은 group 이 추가가 되고 각 group 에 해당하는 command 들이 dict 형식(key: “server list”, value: serverlist에 대한 EntryPoint object)으로 OpenStackShell object 에 업로드 된다. 그 후 주어진 인자 값이 해당 객체 내 command dict 에 존재하는 지 확인한다. 도출 과정1234def initialize_app(self, argv): self._load_plugins() self._load_commands() self._load_plugins() command 수행하면 각 PLUGIN_MODULES 에 해당하는 command_group 과 command 들을 CommandManager obejct 에 사전 타입으로 업로드한다. PLUGIN_MODULES 는 다음과 같다. [openstack.cli.base] compute = openstackclient.compute.client identity = openstackclient.identity.client image = openstackclient.image.client network = openstackclient.network.client object_store = openstackclient.object.client volume = openstackclient.volume.client 업로드 되는 command 는 key 값에 명령어 name, value 에는 EntryPoint 객체가 할당된다. key: “server list” value: EntryPoint(name=’server_list’, value=’openstackclient.compute.v2.server:ListServer’, group=’openstack.compute.v2’) self._load_commands() command 를 통해 group_list 에 “openstack.common”, “openstack.extension” 이 추가가 되었고 그에 해당하는 command 들이 추가되었다. 1234567class App(object): ... def run_subcommand(self, argv): try: subcommand = self.command_manager.find_command(argv) except ValueError as err: ... find_command(argv) : App 클래스 find_command 메소드를 통해 주어진 server list 인자를 현재 OpenStackShell 에 포함된 command 에 있는 지 확인(구별)한다. 만약 인자로 주어진 명령어가 object 내의 command 에 존재하지 않으면 비슷한 (match 되는) 명령어 리스트를 보여주거나 에러를 발생시킨다. server list 라는 명령어를 처리하는 파일은 무엇인가?결론server list 명령어를 처리해주는 파일은 openstack/python - openstackclient/openstackclient/compute/v2/server.py 이다. 도출과정1번 문제에서 command 가 CommandManager 에 사전 형태로 업로드 되는 것을 알 수 있었다. 만약 “server list” 라는 명령어가 업로드된 command 안에 키 값으로 있다면 value 값을 리턴해준다. 이 value 는 EntryPoint 인스턴스이다. 이 EntryPoint 인스턴스는 name, value, group 에 대한 정보를 가지고 있다. “server list”의 경우 name: “server_list” value: “openstackclient.compute.v2.server:ListServer’” group: “openstack.compute.v2” server list 에 해당하는 EntryPoint 인스턴스 value 값에 이 명령어를 처리할 해당 파일과 객체의 정보가 있는 것을 볼 수 있다. openstackcli 는 어떻게 nova api 주소를 알아내나요?도출과정123456# site-packages/keystoneauth1/identity/v3/base.pydef get_auth_ref(self, session, **kwargs): ... resp = session.post(token_url, json=body, headers=headers, authenticated=False, log=False, **rkwargs) ... token_url: ‘http://&lt;오픈스택 구축 설정 ip 주소&gt;/identity/v3/auth/tokens‘ 오픈스택 구축 설정 ip 주소의 경우 저의 경우 클라우드 환경에 가상 서버를 구축하고 가상 서버 공인 ip 주소를 통해 오픈스택이 외부망과 통신할 수 있게끔 설정해줬다. 클라우드 상에서 오픈스택 구축 시 네트워크 설정 참고 자료 - 멘토님 블로그[https://printf.kr/14] OS_AUTH_URL: http://211.37.148.128/identity → 이 설정이 뭔지 설명하기 body: ‘auth’ 정보 headers: {‘Accept’: ‘application/json’} 1234# site-packages/keystoneauth1/session.pydef post(self, url, **kwargs): return self.request(url, 'POST', **kwargs) 1234567891011121314151617# site-packages/keystoneauth1/session.pydef request(self, url, method, json=None, original_ip=None, user_agent=None, redirect=None, authenticated=None, endpoint_filter=None, auth=None, requests_auth=None, raise_exc=True, allow_reauth=True, log=True, endpoint_override=None, connect_retries=None, logger=None, allow=None, client_name=None, client_version=None, microversion=None, microversion_service_type=None, status_code_retries=0, retriable_status_codes=None, rate_semaphore=None, global_request_id=None, connect_retry_delay=None, status_code_retry_delay=None, **kwargs): ... resp = send(**kwargs) ... return resp resp 는 kwargs(headers, auth 정보)를 가지고 ‘http://&lt;오픈스택 구축 설정 ip 주소&gt;/identity/v3/auth/tokens‘ 에서 다음과 같은 “catalog” 값으로 nova, keystone, cinder, glance 등 모든 컴포넌트들의 api 주소를 가져온다. 123# resp 중 &quot;catalog&quot; nova 정보&quot;catalog&quot;:[ ... {&quot;endpoints&quot;: [{&quot;id&quot;: &quot;e7507720bc274e56b420466613be3f07&quot;, &quot;interface&quot;: &quot;public&quot;, &quot;region_id&quot;: &quot;RegionOne&quot;, &quot;url&quot;: &quot;http://211.37.148.128/compute/v2.1&quot;, &quot;region&quot;: &quot;RegionOne&quot;}], &quot;id&quot;: &quot;3e7dec3e86ea4652ad633484b07fa368&quot;, &quot;type&quot;: &quot;compute&quot;, &quot;name&quot;: &quot;nova&quot;}, ... ] nova 의 어떤 API를 호출하여 결과를 받아오나요? ( 어떤 URI 를 호출하나요? )결론‘http://&lt;오픈스택 구축 설정 ip 주소&gt;/compute/v2.1‘ 를 호출해서 결과 값을 받아온다. 도출 과정3번에서 resp 안 “catalog”에 저장된 nova 정보를 보면 “url” key 의 value 값으로 nova URI 가 저장되어있다. 결과를 이쁘게 table 형식으로 출력해주는 함수는 무엇일까요?결론site-packages/cliff/formatters/tables.py TableFormatter 클래스의 emit_list 메소드 에서 결과를 이쁘게 table 형식으로 출력해준다. 도출과정server list 인자의 openstackclient/compute/v2/server.py 파일에서의 처리 결과로 column_names 와 data 값을 할당 받는다. column_names=(〈ID〉, 〈Name〉, 〈Status〉, 〈Networks〉, 〈Image〉, 〈Flavor〉) data = 해당 명령어 맞는 값들이 들어있는 generator 이다. 123456789class DisplayCommandBase(command.Command, metaclass=abc.ABCMeta): def run(self, **parsed_args**): parsed_args = self._run_before_hooks(parsed_args) self.formatter = self._formatter_plugins[parsed_args.formatter].obj column_names, data = self.take_action(parsed_args) column_names, data = self._run_after_hooks(parsed_args, (column_names, data)) **self.produce_output(parsed_args, column_names, data)** return 0 위에서 도출된 값들을 self.produce_output(parsed_args, column_names, data) 를 수행하며 결과값들이 출력이된다. 여기서 self 는 server list 인자 기준 ListServer object 를 가리킨다. 12345678910111213class Lister(display.DisplayCommandBase, metaclass=abc.ABCMeta): ... def produce_output(self, parsed_args, column_names, data): ... **self.formatter.emit_list( columns_to_include, data, self.app.stdout, parsed_args, )** return 0 self.formatter.emit_list(columns_to_include, data, self.app.stdout, parsed_args,) 를 수행 시 cliff/formatters/table.py/TableFormatter 에 emit_list 메소드가 호출된다. 123456789101112131415161718192021def emit_list(self, column_names, data, stdout, parsed_args): # column_names로 PrettyTable 객체를 생성해 x에 할당 x = prettytable.PrettyTable( column_names, print_empty=parsed_args.print_empty, ) x.padding_width = 1 # 이 값을 변경해보면 table 형식이 달라진다는 것을 알 수 있다. if data: self.add_rows(x, column_names, data) # 데이터들이 table의 각 행에 입력된다. min_width = 8 self._assign_max_widths( stdout, x, int(parsed_args.max_width), min_width, parsed_args.fit_width) formatted = x.get_string() stdout.write(formatted) # 결과값(테이블)을 출력해준다. stdout.write('\\n') return 해당 메소드에서 column_names 와 data 를 테이블 형식으로 만들어 출력까지 수행한다. 맺으며..OpenStack는 엄청 거대한 오픈소스 프로젝트이다. 이제까지 한번도 오픈소스 프로젝트를 건드려본 적이 없었다. 이번 기회에 어떻게 오픈소스 코드를 분석하며 동작원리를 파악하는지를 배웠다. 정말 인내심의 한계가 찾아왔었지만 계속 보고 또 보니 큰 그림이 그려지면서 뭐가 뭔지 파악이 되고 동작원리가 이해되기 시작했다. 정말 이 프로젝트를 하며 너무너무 많은 것들을 배우는 거 같다^_^","link":"/2021/08/22/openstack-2/"}],"tags":[{"name":"Openstack","slug":"Openstack","link":"/tags/Openstack/"}],"categories":[{"name":"OpenStack","slug":"OpenStack","link":"/categories/OpenStack/"}]}